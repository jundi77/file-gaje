{"version":3,"sources":["drawer.js"],"names":["define","$","CustomEvents","Log","PubSub","window","SELECTORS","small","document","width","Drawer","length","debug","each","index","ele","trigger","find","drawerid","attr","hidden","getElementById","side","body","preference","M","util","set_user_preference","addClass","bind","this","registerEventListeners","closeAll","prototype","drawer","removeClass","toggleDrawer","e","target","closest","open","focus","publish","preventPageScroll","delta","wheelDelta","originalEvent","detail","bottomOverflow","scrollTop","outerHeight","scrollHeight","topOverflow","preventDefault","element","events","activate","on","data","click","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for a drawer.\n *\n * @package    theme_remui\n * @copyright  2016 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/custom_interaction_events', 'core/log', 'core/pubsub'],\n     function($, CustomEvents, Log, PubSub) {\n\n    window['drawerInitialized'] = false;\n    var SELECTORS = {\n        TOGGLE_REGION: '[data-region=\"drawer-toggle\"]',\n        TOGGLE_ACTION: '[data-action=\"toggle-drawer\"]',\n        TOGGLE_TARGET: 'aria-controls',\n        TOGGLE_SIDE: 'left',\n        BODY: 'body',\n        SECTION: '.list-group-item[href*=\"#section-\"]',\n        DRAWER: '#nav-drawer'\n    };\n\n    var small = $(document).width() < 768;\n\n    /**\n     * Constructor for the Drawer.\n     *\n     * @param {object} root The root jQuery element for the modal\n     */\n    var Drawer = function() {\n\n        if (!$(SELECTORS.TOGGLE_REGION).length) {\n            Log.debug('Page is missing a drawer region');\n        }\n        if (!$(SELECTORS.TOGGLE_ACTION).length) {\n            Log.debug('Page is missing a drawer toggle link');\n        }\n        $(SELECTORS.TOGGLE_REGION).each(function(index, ele) {\n            var trigger = $(ele).find(SELECTORS.TOGGLE_ACTION);\n            var drawerid = trigger.attr('aria-controls');\n            var drawer = $(document.getElementById(drawerid));\n            var hidden = trigger.attr('aria-expanded') == 'false';\n            var side = trigger.attr('data-side');\n            var body = $(SELECTORS.BODY);\n            var preference = trigger.attr('data-preference');\n            if (small) {\n                M.util.set_user_preference(preference, 'false');\n            }\n\n            // drawer.on('mousewheel DOMMouseScroll', this.preventPageScroll);\n\n            if (!hidden) {\n                body.addClass('drawer-open-' + side);\n                trigger.attr('aria-expanded', 'true');\n            } else {\n                trigger.attr('aria-expanded', 'false');\n            }\n        }.bind(this));\n\n        this.registerEventListeners();\n        if (small) {\n            this.closeAll();\n        }\n    };\n\n    Drawer.prototype.closeAll = function() {\n        $(SELECTORS.TOGGLE_REGION).each(function(index, ele) {\n            var trigger = $(ele).find(SELECTORS.TOGGLE_ACTION);\n            var side = trigger.attr('data-side');\n            var body = $(SELECTORS.BODY);\n            var drawerid = trigger.attr('aria-controls');\n            var drawer = $(document.getElementById(drawerid));\n            var preference = trigger.attr('data-preference');\n\n            trigger.attr('aria-expanded', 'false');\n            body.removeClass('drawer-open-' + side);\n            drawer.attr('aria-hidden', 'true');\n            drawer.addClass('closed');\n            if (!small) {\n                M.util.set_user_preference(preference, 'false');\n            }\n        });\n    };\n\n    /**\n     * Open / close the blocks drawer.\n     *\n     * @method toggleDrawer\n     * @param {Event} e\n     */\n    Drawer.prototype.toggleDrawer = function(e) {\n        var trigger = $(e.target).closest('[data-action=toggle-drawer]');\n        var drawerid = trigger.attr('aria-controls');\n        var drawer = $(document.getElementById(drawerid));\n        var body = $(SELECTORS.BODY);\n        var side = trigger.attr('data-side');\n        var preference = trigger.attr('data-preference');\n        if (small) {\n            M.util.set_user_preference(preference, 'false');\n        }\n\n        body.addClass('drawer-ease');\n        var open = trigger.attr('aria-expanded') == 'true';\n        if (!open) {\n            // Open.\n            trigger.attr('aria-expanded', 'true');\n            drawer.attr('aria-hidden', 'false');\n            drawer.focus();\n            body.addClass('drawer-open-' + side);\n            drawer.removeClass('closed');\n            if (!small) {\n                M.util.set_user_preference(preference, 'true');\n            }\n        } else {\n            // Close.\n            body.removeClass('drawer-open-' + side);\n            trigger.attr('aria-expanded', 'false');\n            drawer.attr('aria-hidden', 'true');\n            drawer.addClass('closed');\n            if (!small) {\n                M.util.set_user_preference(preference, 'false');\n            }\n        }\n\n        // Publish an event to tell everything that the drawer has been toggled.\n        // The drawer transitions closed so another event will fire once teh transition\n        // has completed.\n        PubSub.publish('nav-drawer-toggle-start', open);\n    };\n\n    /**\n     * Prevent the page from scrolling when the drawer is at max scroll.\n     *\n     * @method preventPageScroll\n     * @param  {Event} e\n     */\n    Drawer.prototype.preventPageScroll = function(e) {\n        var delta = e.wheelDelta || (e.originalEvent && e.originalEvent.wheelDelta) || -e.originalEvent.detail,\n            bottomOverflow = (this.scrollTop + $(this).outerHeight() - this.scrollHeight) >= 0,\n            topOverflow = this.scrollTop <= 0;\n\n        if ((delta < 0 && bottomOverflow) || (delta > 0 && topOverflow)) {\n            e.preventDefault();\n        }\n    };\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * @method registerEventListeners\n     */\n    Drawer.prototype.registerEventListeners = function() {\n\n        $(SELECTORS.TOGGLE_ACTION).each(function(index, element) {\n            CustomEvents.define($(element), [CustomEvents.events.activate]);\n            $(element).on(CustomEvents.events.activate, function(e, data) {\n                this.toggleDrawer(data.originalEvent);\n                data.originalEvent.preventDefault();\n            }.bind(this));\n        }.bind(this));\n\n        $(SELECTORS.SECTION).click(function() {\n            if (small) {\n                this.closeAll();\n            }\n        }.bind(this));\n\n        // Publish an event to tell everything that the drawer completed the transition\n        // to either an open or closed state.\n        $(SELECTORS.DRAWER).on('webkitTransitionEnd msTransitionEnd transitionend', function(e) {\n            var drawer = $(e.target).closest(SELECTORS.DRAWER);\n            var open = drawer.attr('aria-hidden') == 'false';\n            PubSub.publish('nav-drawer-toggle-end', open);\n        });\n    };\n\n    return {\n        'init': function() {\n            if (window['drawerInitialized'] == false) {\n                window['drawerInitialized'] = true;\n                return new Drawer();\n            }\n            return false;\n        }\n    };\n});\n"],"file":"drawer.min.js"}